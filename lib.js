'use strict'

const path = require('path')
const prettier = require('prettier')

const WARNING = [
  '# WARNING - THIS IS AN AUTOGENERATED FILE.',
  '# PLEASE DO NOT EDIT THIS FILE DIRECTLY.',
  ''
]

let languages = prettier.getSupportInfo().languages
let extensions = new Set(
  languages.map(lang => lang.extensions).reduce((a, b) => a.concat(b), [])
)

/**
 * @param {string} file
 * @return {boolean}
 */
function isPrettierSupportedExt(file) {
  return extensions.has(path.extname(file))
}

/**
 * @param {string} file
 * @return {string | any}
 */
function getPrettierParser(file) {
  return languages
    .find(lang => lang.extensions.includes(path.extname(file)))
    .parsers.shift()
}

/**
 * @param {Buffer} buf
 * @return {({file: string, mtimeMs: number, size: number})[]}
 */
function parseLockFile(buf) {
  return buf
    .toString()
    .split(/\r?\n/)
    .filter(
      line => !!line && !line.startsWith('#') && /^\S+ \d*.?\d+ \d+$/.test(line)
    )
    .map(line => line.match(/^(\S+) (\d*.?\d+) (\d+)$/))
    .map(match => ({
      file: match[1],
      mtimeMs: parseFloat(match[2]),
      size: parseInt(match[3])
    }))
    .filter(mod => isPrettierSupportedExt(mod.file))
}

/**
 * @param {({file: string, mtimeMs: number, size: number})[]} mods
 * @return {Buffer}
 */
function stringifyLockFile(mods) {
  return Buffer.from(
    WARNING.concat(
      mods.filter(Boolean).map(mod => `${mod.file} ${mod.mtimeMs} ${mod.size}`)
    ).join('\n')
  )
}

module.exports = {
  isPrettierSupportedExt,
  getPrettierParser,
  parseLockFile,
  stringifyLockFile
}
